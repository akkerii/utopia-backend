name: Deploy to Cloud Run

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  PROJECT_ID: dotted-banner-363222
  SERVICE_NAME: utopia-backend
  REGION: us-central1
  GAR_LOCATION: us-central1

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug - Check if secret exists
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        run: |
          if [ -z "$GCP_SA_KEY" ]; then
            echo "‚ùå GCP_SA_KEY secret not found"
            exit 1
          else
            echo "‚úÖ GCP_SA_KEY secret found"
            echo "Secret length: ${#GCP_SA_KEY} characters"
          fi

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"
          # Request specific scopes for the token
          scopes: |
            https://www.googleapis.com/auth/cloud-platform
            https://www.googleapis.com/auth/service.management

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Debug - Check permissions and project setup
        run: |
          echo "üîç Checking permissions and project setup..."
          echo "Project ID: ${{ env.PROJECT_ID }}"
          echo "Service Name: ${{ env.SERVICE_NAME }}"
          echo "Region: ${{ env.REGION }}"
          echo "GAR Location: ${{ env.GAR_LOCATION }}"

          # Check if we can access the project
          gcloud config list --format="yaml"

          # Note: APIs must be enabled manually by project owner
          echo "‚ÑπÔ∏è Required APIs (must be enabled by project owner):"
          echo "- cloudbuild.googleapis.com"
          echo "- run.googleapis.com"
          echo "- artifactregistry.googleapis.com"
          echo "- containerregistry.googleapis.com"
          echo "- cloudresourcemanager.googleapis.com"

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build and push image using Cloud Build
        run: |
          # Submit build asynchronously to avoid log streaming issues
          BUILD_ID=$(gcloud builds submit --tag ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} --async --format="value(name)")
          echo "Build ID: $BUILD_ID"
          echo "Build URL: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=${{ env.PROJECT_ID }}"

          # Wait for build to complete
          echo "Waiting for build to complete..."
          TIMEOUT=1800  # 30 minutes timeout
          ELAPSED=0

          while true; do
            STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)")
            echo "Build status: $STATUS"

            if [ "$STATUS" = "SUCCESS" ]; then
              echo "‚úÖ Build completed successfully"
              break
            elif [ "$STATUS" = "FAILURE" ] || [ "$STATUS" = "CANCELLED" ] || [ "$STATUS" = "TIMEOUT" ]; then
              echo "‚ùå Build failed with status: $STATUS"
              echo "Build ID: $BUILD_ID"
              echo "View logs at: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=${{ env.PROJECT_ID }}"
              # Try to get basic build info without logs
              gcloud builds describe $BUILD_ID --format="yaml(status,statusDetail,logsBucket)" || true
              exit 1
            else
              if [ $ELAPSED -ge $TIMEOUT ]; then
                echo "‚ùå Build timeout after $TIMEOUT seconds"
                echo "Build ID: $BUILD_ID"
                echo "View logs at: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=${{ env.PROJECT_ID }}"
                exit 1
              fi
              echo "Build still in progress... waiting 30 seconds"
              sleep 30
              ELAPSED=$((ELAPSED + 30))
            fi
          done

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --port 8080 \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars "NODE_ENV=production" \
            --set-secrets "OPENAI_API_KEY=openai-api-key:latest"

      - name: Show Output
        run: |
          echo "Deployment completed!"
          echo "Service URL: $(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')"
